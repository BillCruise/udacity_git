What happens when you initialize a repository? Why do you need to do it?

Git initializes an empty repository in the directory where you ran the init command.
You need to run git init to tell Git to create tracking files for that directory.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an intermediary between the working directory and the repository.
It gives you the flexibility to group files in your working directory together so that you can
control what goes in to each commit to the repository.


How can you use the staging area to make sure you have one commit per logical change?

Git allows you to specify which files are added to the staging area, then commit the entire staging
area to the repository as one version.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When experimenting with new features, branches will help you keep organized by adding all of the
changes on a branch, while other develpment (bug fixes) continues on the main branch.


How do the diagrams help you visualize the branch structure?

Diagrams help you keep track of which commits are reachable from which parts of the branch structure.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging to branches results in the changes from one branch being added to another.
We represent it in a diagram as the two branches coming together to form one branch.


What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Automatic merging is much easier, but Git won't always be able to do it for you.
Manually merging forces you to understand the changes made by both developers. It is also more time-consuming.

