# Show the commits made in this repository, starting with the most recent.
$ git log

# Use up and down arrows to navigate through git log.
# Type 'q' to exit the log. (Uses less commands.)

# Make a copy of an entire Git repository, including the history, onto your own computer.
$ git clone https://github.com/udacity/asteroids.git

# Get colored diff output
$ git config --global color.ui auto

# Compare two commits, printing each line that is present in one commit but not the other.
# git diff first_id second_id
$ git diff f19cb1b80fe27e938e4d72770ca0a42f25e99ecc b0678b161fcf74467ed3a63110557e3d6229cfa6
$ git diff 80f3bc7aab53d79640da819d9c1c7e05f9f57620 343935ff4f3853653f23e3694d64ffa3035ed1de

# Temporarily reset all files in a directory to their state at the time of a specific commit.
# git checkout != svn checkout
# You will be in 'detached HEAD' state when you checkout an older revision.
$ git checkout f19cb1b80fe27e938e4d72770ca0a42f25e99ecc

# latest asteroids revision: 3884eab839af1e82c44267484cf2945a766081f3


$ git checkout 25ede836903881848fea811df5b687b59d962da3


# Create a Git repository in an empty directory, or in a directory that already contains files.
# Git does not automatically create a commit, so you have to do that yourself if the
# directory already contains files.
$ git init
$ git commit 				#(optional. see note above.)

# See what files have changed since the last commit.
$ git status

# You don't have to commit all files to your Git repository at once.
# Instead you can add files to a staging area so that you have control over
# what specific changes are grouped into each commit.
$ git add file_1.txt
$ git add file_2.txt
$ git commit 

# Configure Git to open Notepad for commit messages.
$ git config core.editor notepad

# View the differences between the working directory and the staging area.
$ git diff

# View the differences between the staging area and the lastest commit to the repository.
$ git diff --staged

# Discard any changes in either the working directory or the staging area.
# Be careful! This command is not reversible! 
$ git reset --hard


# Create and view branches
$ git branch
$ git branch easy-mode
$ git checkout easy-mode


# Reset HEAD back to the master branch.
$ git checkout master


# Merge a branch into the master branch.
$ git merge master coins


# Show the difference between a commit and its parent (without knowing the parent id).
$ git show 25ede836903881848fea811df5b687b59d962da3

# Delete a branch that's no longer needed.
# It might have been an experimental branch, or it might already be merged.
# This won't delete the commits in the branch, just the label.
$ git branch -d coins

# View a graph of the git branch/merge history.
$ git log --graph


# Committing a conflict resolution.
$ git merge master easy-mode
Auto-merging game.js
CONFLICT (content): Merge conflict in game.js
Automatic merge failed; fix conflicts and then commit the result.

$ git status
On branch easy-mode
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)

        both modified:   game.js

no changes added to commit (use "git add" and/or "git commit -a")

$ git add game.js

$ git status
On branch easy-mode
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

        modified:   game.js

$ git commit
[easy-mode 719e268] Merge branch 'master' into easy-mode

$ git status
On branch easy-mode
nothing to commit, working tree clean


# Synching repositories.
# First create a new repository on GitHub through your web browser.
# (Don't initialize with a README, since we already have content in a local repository.)
# Add the new GitHub repository as a remote in our local repository.
$ git remote
$ git remote add origin git@github.com:BillCruise/udacity_git.git
$ git remote -v
$ git push -u origin master

# Get remote changes in the local repository.
$ git pull origin master

# Forking is a GitHub-specific concept. It allows you to clone someone else's
# GitHub repository under your own GitHub account (while giving them credit).
# This saves you from cloning to your local machine, then creating a GitHub repository
# and pushing the local files. It's easier to just fork (one click) then clone to make changes.
# This process is easier because Git automatically sets up a remote when you clone a repository.

# Merging remote changes.
# First update origin/master with the latest version from the remote,
# then merge those changes into the local master repository.
$ git fetch origin
$ git merge master origin/master

# This is what happens automatically when you use the following command.
$ git pull origin master

# You can see the difference between the local master branch and origin/master with
$ git fetch origin
$ git log origin/master
$ git diff origin/master master





